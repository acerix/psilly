{"version":3,"sources":["webpack:///./routes/chat/style.css","webpack:///./routes/chat/index.tsx"],"names":["ChatItem","props","item","color","substr","message","length","style","Chat","ref","createRef","inputRef","statusRef","items","setItems","useState","chatFetchAborter","AbortController","useEffect","element","current","inputElement","statusElement","renderCallbackID","renderTimeoutID","updateTimeoutID","alive","paused","connected","mouseDown","mouseLeftDownY","g","lastMessage","position","velocity","acceleration","handleBlur","window","addEventListener","handleFocus","handleMouseDown","event","button","clientY","preventDefault","handleMouseUp","focus","handleContextMenu","handleMouseMove","backgroundPosition","render","setTimeout","requestAnimationFrame","Math","abs","random","update","params","value","encodeURIComponent","fetch","then","res","json","data","innerText","display","catch","err","console","error","alert","location","reload","cancelAnimationFrame","abort","clearTimeout","removeEventListener","class","Helmet","title","autofocus","map","key"],"mappings":"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","file":"route-chat.chunk.d8003.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"chat__whrty\"};","import { FunctionalComponent, createRef, h } from 'preact'\nimport { useEffect, useState } from 'preact/hooks'\nimport Helmet from 'react-helmet'\nimport style from './style.css'\n\ninterface ChatItemProps {\n  item: string;\n}\n\nconst ChatItem: FunctionalComponent<ChatItemProps> = (props: ChatItemProps) => {\n  const { item } = props\n  const color = item.substr(-6)\n  const message = item.substr(0, item.length-6)\n  return <li style={{color: `#${color}`}}>{message}</li>\n}\n\nconst Chat: FunctionalComponent = () => {\n  const ref = createRef<HTMLElement>()\n  const inputRef = createRef<HTMLInputElement>()\n  const statusRef = createRef<HTMLParagraphElement>()\n  const [items, setItems] = useState<string[]>([])\n  const chatFetchAborter = new AbortController()\n\n  useEffect(() => {\n    const element = ref.current as HTMLElement\n    const inputElement = inputRef.current as HTMLInputElement\n    const statusElement = statusRef.current as HTMLParagraphElement\n    const refreshMs = 256\n    let alive = true\n    let paused = false\n    let connected = false\n    let mouseDown = 0\n    let mouseLeftDownY = 0\n    let g = 0\n    let lastMessage = ''\n    let renderCallbackID: number\n    let renderTimeoutID: ReturnType<typeof setTimeout>\n    let updateTimeoutID: ReturnType<typeof setTimeout>\n    let position = 0\n    let velocity = 4\n    let acceleration = 0\n    \n    const handleBlur = (): void => {\n      paused = true\n    }\n    window.addEventListener('blur', handleBlur)\n\n    const handleFocus = (): void => {\n      paused = false\n    }\n    window.addEventListener('focus', handleFocus)\n\n    const handleMouseDown = (event: MouseEvent): boolean => {\n      mouseDown |= (1<<event.button)\n      if (event.button===0) {\n        mouseLeftDownY = event.clientY\n      }\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('mousedown', handleMouseDown)\n\n    const handleMouseUp = (event: MouseEvent): boolean => {\n      mouseDown ^= (1<<event.button)\n      if (event.button===0) {\n        position = event.clientY + mouseLeftDownY\n        velocity = 0.06 * (position - g)\n        acceleration = 0\n      }\n      inputElement.focus()\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('mouseup', handleMouseUp)\n\n    const handleContextMenu = (event: MouseEvent): boolean => {\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('contextmenu', handleContextMenu)\n\n    const handleMouseMove = (event: MouseEvent): void => {\n      if (mouseDown&1) {\n        const position = event.clientY + mouseLeftDownY\n        element.style.backgroundPosition = `0 ${position}px`\n      }\n    }\n    window.addEventListener('mousemove', handleMouseMove)\n\n    const draw = (): void => {\n      if (!(mouseDown&1)) {\n        velocity += acceleration\n        position += velocity\n        if (Math.abs(velocity) > 32 && velocity * acceleration >= 0) {\n          acceleration =  -velocity * Math.random() / 128\n        }\n        element.style.backgroundPosition = `0 ${position}px`\n      }\n      else {\n        g = mouseLeftDownY\n      }\n    }\n\n    const render = (): void => {\n      if (paused) {\n        renderTimeoutID = setTimeout(render, 512)\n      }\n      else {\n        renderCallbackID = window.requestAnimationFrame(render)\n        draw()\n      }\n    }\n    render()\n\n    const update = (): void => {\n      if (paused) {\n        if (alive) updateTimeoutID = setTimeout(update, refreshMs)\n        return\n      }\n      let params = '?r'\n      if (lastMessage!==inputElement.value) {\n        params += `&s=${encodeURIComponent(inputElement.value)}`\n        lastMessage = inputElement.value\n      }\n      fetch(\n        `https://psilly.com/experiments/ajax/chatter_chat.pill${params}`,\n        chatFetchAborter\n      )\n        .then(res => res.json())\n        .then(data => setItems(data || []))\n        .then(() => {\n          if (!alive) return\n          if (!connected) {\n            connected = true\n            statusElement.innerText = ''\n            statusElement.style.display = 'none'\n          }\n        })\n        .then(() => {\n          if (alive) updateTimeoutID = setTimeout(update, 1028)\n        })\n        .catch(err => {\n          if (!alive) return\n          connected = false\n          statusElement.innerText = err as string\n          statusElement.style.display = 'block'\n          console.error(err)\n          alert('Error connecting to server.\\nMaybe you lost your connection or maybe you just don\\'t like cookies.\\nRefresh the page, with cookies enabled, to try again.')\n          location.reload()\n        })\n    }\n    update()\n\n    statusElement.innerText = 'Connecting...'\n    inputElement.focus()\n\n    return (): void => {\n      alive = false\n      window.cancelAnimationFrame(renderCallbackID)\n      chatFetchAborter.abort()\n      clearTimeout(renderTimeoutID)\n      clearTimeout(updateTimeoutID)\n      window.removeEventListener('blur', handleBlur)\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('mousedown', handleMouseDown)\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('contextmenu', handleContextMenu)\n      window.removeEventListener('mousemove', handleMouseMove)\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <section ref={ref} class={style.chat}>\n      <Helmet title=\"Chatter\" />\n      <input ref={inputRef} autofocus />\n      <ul class=\"output\">\n        {items.map(item => (\n          <ChatItem item={item} key={item} />\n        ))}\n      </ul>\n      <p ref={statusRef} class=\"text-center\">A colourful ape input aggregator.</p>\n    </section>\n  )\n}\n\nexport default Chat\n"],"sourceRoot":""}