{"version":3,"sources":["webpack:///./routes/chat/style.css","webpack:///./routes/chat/index.tsx"],"names":["ChatItem","props","item","Chat","ref","createRef","inputRef","statusRef","items","setItems","useState","useEffect","element","current","inputElement","statusElement","renderCallbackID","paused","connected","mouseDown","mouseLeftDownY","g","lastMessage","position","velocity","acceleration","handleBlur","window","addEventListener","handleFocus","handleMouseDown","event","button","clientY","preventDefault","handleMouseUp","focus","handleContextMenu","handleMouseMove","style","backgroundPosition","render","setTimeout","requestAnimationFrame","Math","abs","random","update","params","value","encodeURIComponent","fetch","then","res","json","data","innerText","display","catch","err","console","error","alert","location","reload","cancelAnimationFrame","removeEventListener","class","Helmet","title","autofocus","map","key"],"mappings":"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","file":"route-chat.chunk.9b78a.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"chat__whrty\"};","import { FunctionalComponent, createRef, h } from 'preact'\nimport { useEffect, useState } from 'preact/hooks'\nimport Helmet from 'react-helmet'\nimport style from './style.css'\n\n// https://preactjs.com/repl/\n\n// type ChatMessage = {\n//   color: string;\n//   body: string;\n// }\n\ninterface ChatItemProps {\n  item: string;\n}\n\nconst ChatItem: FunctionalComponent<ChatItemProps> = (props: ChatItemProps) => {\n  const { item } = props\n  return (\n    <li>{item}</li>\n  )\n  /*\n  return (\n    <li>{inner.color} {inner.body}</li>\n  )\n  */\n}\n\nconst Chat: FunctionalComponent = () => {\n  const ref = createRef<HTMLElement>()\n  const inputRef = createRef<HTMLInputElement>()\n  const statusRef = createRef<HTMLParagraphElement>()\n  //const [items, setItems] = useState<ChatMessage[]>([])\n  const [items, setItems] = useState<string[]>([])\n\n  useEffect(() => {\n    const element = ref.current as HTMLElement\n    const inputElement = inputRef.current as HTMLInputElement\n    const statusElement = statusRef.current as HTMLParagraphElement\n    let paused = false\n    let connected = false\n    let mouseDown = 0\n    let mouseLeftDownY = 0\n    let g = 0\n    let lastMessage = ''\n    let renderCallbackID: number\n    let position = 0\n    let velocity = 1\n    let acceleration = 0\n    \n    const handleBlur = (): void => {\n      paused = true\n    }\n    window.addEventListener('blur', handleBlur)\n\n    const handleFocus = (): void => {\n      paused = false\n    }\n    window.addEventListener('focus', handleFocus)\n\n    const handleMouseDown = (event: MouseEvent): boolean => {\n      mouseDown |= (1<<event.button)\n      if (event.button===0) {\n        mouseLeftDownY = event.clientY\n      }\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('mousedown', handleMouseDown)\n\n    const handleMouseUp = (event: MouseEvent): boolean => {\n      mouseDown ^= (1<<event.button)\n      if (event.button===0) {\n        position = event.clientY + mouseLeftDownY\n        velocity = 0.06 * (position - g)\n        acceleration = 0\n      }\n      // c = e.clientY + o\n      // v = .06*(c-g);\n      // a = 0\n      inputElement.focus()\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('mouseup', handleMouseUp)\n\n    const handleContextMenu = (event: MouseEvent): boolean => {\n      event.preventDefault()\n      return false\n    }\n    window.addEventListener('contextmenu', handleContextMenu)\n\n    const handleMouseMove = (event: MouseEvent): void => {\n      if (mouseDown&1) {\n        const position = event.clientY + mouseLeftDownY\n        element.style.backgroundPosition = `0 ${position}px`\n      }\n    }\n    window.addEventListener('mousemove', handleMouseMove)\n\n    const draw = (): void => {\n      if (!(mouseDown&1)) {\n        velocity += acceleration\n        position += velocity\n        if (Math.abs(velocity) > 32 && velocity * acceleration >= 0) {\n          acceleration =  -velocity * Math.random() / 128\n        }\n        element.style.backgroundPosition = `0 ${position}px`\n      }\n      else {\n        g = mouseLeftDownY\n      }\n    }\n\n    const render = (): void => {\n      if (paused) {\n        setTimeout(render, 128)\n        return\n      }\n      renderCallbackID = window.requestAnimationFrame(render)\n      draw()\n    }\n    render()\n\n    const update = (): void => {\n      if (paused) {\n        setTimeout(update, 4096)\n        return\n      }\n      let params = ''\n      if (lastMessage!==inputElement.value) {\n        params = `?s=${encodeURIComponent(inputElement.value)}`\n        lastMessage = inputElement.value\n      }\n      fetch(`https://psilly.com/experiments/ajax/chatter_chat.pill${params}`)\n        .then(res => res.json())\n        //.then(res => res.map((v: string) => {'color': v.slice(-6), 'body': v.slice(0, -6)}))\n        //.then(res => res.map((v: string) => [v.slice(-6), v.slice(0, -6)]))\n        .then(data => setItems(data || []))\n        .then(() => {\n          if (!connected) {\n            connected = true\n            statusElement.innerText = ''\n            statusElement.style.display = 'none'\n          }\n        })\n        .then(() => setTimeout(update, 128))\n        .catch(err => {\n          connected = false\n          statusElement.innerText = err as string\n          statusElement.style.display = 'block'\n          console.error(err)\n          alert('Error connecting to server. Check that your connection is working and that you have some disabled cookies like some kind of heathen.')\n          location.reload()\n        })\n    }\n    update()\n\n    statusElement.innerText = 'Connecting...'\n\n    return (): void => {\n      window.cancelAnimationFrame(renderCallbackID)\n      window.removeEventListener('blur', handleBlur)\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('mousedown', handleMouseDown)\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('contextmenu', handleContextMenu)\n      window.removeEventListener('mousemove', handleMouseMove)\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <section ref={ref} class={style.chat}>\n      <Helmet title=\"Chatter\" />\n      <input ref={inputRef} autofocus />\n      <ul class=\"output\">\n        {items.map(item => (\n          <ChatItem item={item} key={item} />\n        ))}\n      </ul>\n      <p ref={statusRef} class=\"text-center\">A colourful ape input aggregator.</p>\n    </section>\n  )\n}\n\nexport default Chat\n"],"sourceRoot":""}