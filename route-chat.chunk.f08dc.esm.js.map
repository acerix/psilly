{"version":3,"sources":["webpack:///./routes/chat/style.css","webpack:///./routes/chat/index.tsx"],"names":["ChatItem","props","item","Chat","ref","createRef","items","setItems","useState","useEffect","renderCallbackID","paused","position","velocity","handleBlur","window","addEventListener","handleFocus","draw","console","log","render","setTimeout","requestAnimationFrame","update","fetch","then","res","json","data","catch","err","error","cancelAnimationFrame","removeEventListener","class","style","Helmet","title","autofocus","map","key"],"mappings":"0IACe,EAAQ,cCevB,MAAMA,EAAgDC,IACpD,MAAM,KAAEC,GAASD,EACjB,OACE,sBAAKC,IAsFMC,UA7EmB,KAChC,MAAMC,EAAMC,uBAELC,EAAOC,GAAYC,YAAmB,IA4D7C,OA1DAC,aAAU,KAER,IACIC,EADAC,GAAS,EAETC,EAAW,EACXC,EAAW,EACf,MAEMC,EAAa,KACjBH,GAAS,GAEXI,OAAOC,iBAAiB,OAAQF,GAEhC,MAAMG,EAAc,KAClBN,GAAS,GAEXI,OAAOC,iBAAiB,QAASC,GAEjC,MAAMC,EAAO,KACXL,GAbmB,EAcnBD,GAAYC,EAGK,KAAbD,GAAiBO,QAAQC,IAAIF,IAG7BG,EAAS,KACTV,EACFW,WAAWD,EAAQ,MAGrBX,EAAmBK,OAAOQ,sBAAsBF,GAChDH,MAEFG,IAEA,MAAMG,EAAS,KACTb,GAIJc,MAAM,yDACHC,MAAKC,GAAOA,EAAIC,SAGhBF,MAAKG,GAAQtB,EAASsB,GAAQ,MAC9BC,OAAMC,GAAOZ,QAAQa,MAAMD,KAR5BT,WAAWE,EAAQ,OAavB,OAFAA,IAEO,KACLT,OAAOkB,qBAAqBvB,GAC5BK,OAAOmB,oBAAoB,OAAQpB,GACnCC,OAAOmB,oBAAoB,QAASjB,MAErC,IAGD,uBAASb,IAAKA,EAAK+B,MAAOC,GACxB,YAACC,EAAA,EAAD,CAAQC,MAAM,YACd,qBAAOC,WAAS,IAChB,kBAAIJ,MAAM,UACP7B,EAAMkC,KAAItC,GACT,YAACF,EAAD,CAAUE,KAAMA,EAAMuC,IAAKvC,OAG/B,iBAAGiC,MAAM,eAAT","file":"route-chat.chunk.f08dc.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"chat__whrty\"};","import { FunctionalComponent, createRef, h } from 'preact'\nimport { useEffect, useState } from 'preact/hooks'\nimport Helmet from 'react-helmet'\nimport style from './style.css'\n\n// https://preactjs.com/repl/\n\n// type ChatMessage = {\n//   color: string;\n//   body: string;\n// }\n\ninterface ChatItemProps {\n  item: string;\n}\n\nconst ChatItem: FunctionalComponent<ChatItemProps> = (props: ChatItemProps) => {\n  const { item } = props\n  return (\n    <li>{item}</li>\n  )\n  /*\n  return (\n    <li>{inner.color} {inner.body}</li>\n  )\n  */\n}\n\nconst Chat: FunctionalComponent = () => {\n  const ref = createRef()\n  //const [items, setItems] = useState<ChatMessage[]>([])\n  const [items, setItems] = useState<string[]>([])\n\n  useEffect(() => {\n    //const element = ref.current as HTMLElement\n    let paused = false\n    let renderCallbackID: number\n    let position = 0\n    let velocity = 1\n    const acceleration = 0\n\n    const handleBlur = (): void => {\n      paused = true\n    }\n    window.addEventListener('blur', handleBlur)\n\n    const handleFocus = (): void => {\n      paused = false\n    }\n    window.addEventListener('focus', handleFocus)\n\n    const draw = (): void => {\n      velocity += acceleration\n      position += velocity\n      // if (Math.abs(v)>32 && v*a>=0) a = 0 - v * Math.random() * 0.01\n      //element.style.backgroundPosition = `0 ${position}px`\n      if (position === 69) console.log(draw)\n    }\n\n    const render = (): void => {\n      if (paused) {\n        setTimeout(render, 128)\n        return\n      }\n      renderCallbackID = window.requestAnimationFrame(render)\n      draw()\n    }\n    render()\n\n    const update = (): void => {\n      if (paused) {\n        setTimeout(update, 4096)\n        return\n      }\n      fetch('https://psilly.com/experiments/ajax/chatter_chat.pill')\n        .then(res => res.json())\n        //.then(res => res.map((v: string) => {'color': v.slice(-6), 'body': v.slice(0, -6)}))\n        //.then(res => res.map((v: string) => [v.slice(-6), v.slice(0, -6)]))\n        .then(data => setItems(data || []))\n        .catch(err => console.error(err))\n      setTimeout(update, 4096)\n    }\n    update()\n\n    return (): void => {\n      window.cancelAnimationFrame(renderCallbackID)\n      window.removeEventListener('blur', handleBlur)\n      window.removeEventListener('focus', handleFocus)\n    }\n  }, [])\n\n  return (\n    <section ref={ref} class={style.chat}>\n      <Helmet title=\"Chatter\" />\n      <input autofocus />\n      <ul class=\"output\">\n        {items.map(item => (\n          <ChatItem item={item} key={item} />\n        ))}\n      </ul>\n      <p class=\"text-center\">Ya know, it could just be me, but I feel this chat room is missing something...</p>\n    </section>\n  )\n}\n\nexport default Chat\n"],"sourceRoot":""}